#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091,SC1090
source "$DOTFILES/sources/strict.bash"

# ✓✔☑
# todo: this is newer than commands/pipp and setup-util pip and pipx, so consider what to do with them

# =====================================
# Start

echo-segment --h1='Setup Python'

# =====================================
# Configuration

source "$DOTFILES/sources/config.bash"

# setup.bash provides:
PYTHON_INSTALL=()
PIP_INSTALL=()
PYTHON2_PIP_INSTALL=()
PYTHON3_PIP_INSTALL=()
PIPX_INSTALL=()
load_dotfiles_config 'setup.bash'

# adjustments
mapfile -t PYTHON_INSTALL < <(prepare_packages 'PYTHON_INSTALL' -- "${PYTHON_INSTALL[@]}")
mapfile -t PIP_INSTALL < <(prepare_packages 'PIP_INSTALL' -- "${PIP_INSTALL[@]}")
mapfile -t PYTHON2_PIP_INSTALL < <(prepare_packages 'PYTHON2_PIP_INSTALL' -- "${PYTHON2_PIP_INSTALL[@]}")
mapfile -t PYTHON3_PIP_INSTALL < <(prepare_packages 'PYTHON3_PIP_INSTALL' -- "${PYTHON3_PIP_INSTALL[@]}")
mapfile -t PIPX_INSTALL < <(prepare_packages 'PIPX_INSTALL' -- "${PIPX_INSTALL[@]}")

# =====================================
# Install

# log
echo-segment --h2="Install Python"
setup-util-python
source "$DOTFILES/sources/environment.sh"
echo-segment --g2="Install Python"

# =====================================
# PyEnv

# pyenv
# PYENV_ROOT="${PYENV_ROOT:-"$HOME/.pyenv"}"
# echo -e "\nCleaning pyenv..."
# rm -Rf "$PYENV_ROOT"
# if test -n "${PYENV_VERSION-}"; then
# 	echo -e "\nEnsuring pyenv is latest..."
# 	fetch https://pyenv.run | bash
# 	source "$DOTFILES/sources/environment.sh"
# 	pyenv install "$PYENV_VERSION"
# fi
# source "$DOTFILES/sources/environment.sh"

# =====================================
# Packages

# pip, pipx, user
function pip_install {
	local bin="$1"
	local pip_install=()
	local pipx_install=()
	local pip_installer_url pip_installer python_version

	if ! command-exists "$bin"; then
		return 0
	fi

	# log
	echo-segment --h2="packages for $bin"
	echo-style --dim="$bin: $(which "$bin")"

	# generic prepare
	pip_install+=(
		"${PIP_INSTALL[@]}"
		"${PYTHON_INSTALL[@]}"
	)

	# version specific prepare
	if get-python-version "$bin" '2.'; then
		python_version=2
		pip_install+=("${PYTHON2_PIP_INSTALL[@]}")
		pip_installer_url='https://bootstrap.pypa.io/pip/2.7/get-pip.py'
	else
		python_version=3
		pip_install+=("${PYTHON3_PIP_INSTALL[@]}")
		pipx_install+=("${PIPX_INSTALL[@]}")
		pip_installer_url='https://bootstrap.pypa.io/get-pip.py'
	fi

	# download pip
	echo-segment --h3="download pip"
	pip_installer="$(fs-temp --xdg --directory="python-${python_version}" --filename="get-pip.py")"
	# ^ filename must be get-pip.py, otherwise this error occurs:
	# https://github.com/pypa/pip/issues/10809
	# AssertionError: /usr/local/Cellar/python@3.9/3.9.10/Frameworks/Python.framework/Versions/3.9/lib/python3.9/distutils/core.py
	eval-collapse -- down "$pip_installer_url" --destination="$pip_installer"
	chmod +x "$pip_installer"
	echo-style --dim="installer: $pip_installer"
	echo-segment --g3="download pip"

	# install pip
	echo-segment --h3="install pip"
	eval-collapse -- "$bin" "$pip_installer" --user
	echo-segment --g3="install pip"
	source "$DOTFILES/sources/environment.sh"

	# echo -e "\nUpgrading pip for $bin..."
	# "$bin" -m pip install \
	# 	--user --upgrade --force-reinstall --no-warn-script-location \
	# 	pip setuptools
	# source "$DOTFILES/sources/environment.sh"

	# install pip packages
	echo-segment --h3="install ${#pip_install[@]} pip packages"
	for item in "${pip_install[@]}"; do
		eval-collapse --success="$(echo-style --success="pip installed: $item")" \
			-- "$bin" -m \
			pip install --user --upgrade --force-reinstall --no-warn-script-location \
			"$item" || :
	done
	echo-segment --g3="install ${#pip_install[@]} pip packages"

	# pipx
	if test "$python_version" -eq 3; then
		# install pipx
		echo-segment --h3="install pipx"
		eval-collapse \
			-- "$bin" -m \
			pip install --user --upgrade --force-reinstall --no-warn-script-location \
			pipx || :
		source "$DOTFILES/sources/environment.sh"
		echo-segment --g3="install pipx"

		# install pipx packages
		echo-segment --h3="install ${#pipx_install[@]} pipx packages"
		for item in "${pipx_install[@]}"; do
			eval-collapse --success="$(echo-style --success="pipx installed: $item")" \
				-- "$bin" -m \
				pipx install --include-deps --force \
				"$item" || :
		done
		echo-segment --g3="install ${#pipx_install[@]} pipx packages"
	fi

	# done
	echo-segment --g2="packages for $bin"
}

# install
pip_install python
pip_install python2
pip_install python3

# =====================================
# Finish

echo-segment --g1='Setup Python'
