#!/usr/bin/env bash
# shellcheck disable=SC2164
source "$DOTFILES/sources/strict.bash"

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Output the absolute path of a relative path.

		USAGE:
		fs-absolute <path...>

		EXAMPLES:
		fs-absolute ..
		fs-absolute .
		fs-absolute ./*

		QUIRKS:
		Use [fs-realpath] if you want symlinks resolved.
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
paths=()
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--')
		paths+=("$@")
		shift $#
		break
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) paths+=("$item") ;;
	esac
done

# check
if test "${#paths[@]}" -eq 0; then
	help "No paths were provided."
fi

# =====================================
# Act

# `pushd`/`popd` necessary, as otherwise the loop will cause weird results with `cd`
for path in "${paths[@]}"; do
	# don't use [pwd -P] as -P resolves symlinks
	# and resolving symlinks is what [fs-realpath] is for
	filename="$(basename "$path")"
	if test "$filename" = '..'; then
		# handles parent
		pushd "$(dirname "$path")/.." >/dev/null
		pwd
		popd >/dev/null
	elif test "$filename" = '.'; then
		# handlws cwd
		pushd "$(dirname "$path")" >/dev/null
		pwd
		popd >/dev/null
	else
		# handles files and directories
		pushd "$(dirname "$path")" >/dev/null
		echo "$(pwd)/$filename"
		popd >/dev/null
	fi
done
