#!/usr/bin/env bash
source "$DOTFILES/sources/strict.bash"

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Gets the filename of a path.

		USAGE:
		fs-filename [--first] [--basename] <path>

		FLAGS:
		--first      If the filename has multiple extensions, only the first part is returned.
		--basename   If a path was returned, only work with the basename.

		EXAMPLES:
		fs-filename .dorothy/a.b.c
		# => .dorothy/a.b

		fs-filename --basename .dorothy/a.b.c
		# => a.b

		fs-filename --basename --first .dorothy/a.b.c
		# => a

		fs-filename --first .dorothy/a.b.c
		# => .dorothy/a
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
option_first='no'
option_basename='no'
path=''
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--no-first'* | '--first'*)
		option_first="$(get-flag-value first --missing="$option_first" -- "$item" | echo-affirmative)"
		;;
	'--no-basename'* | '--basename'*)
		option_basename="$(get-flag-value basename --missing="$option_basename" -- "$item" | echo-affirmative)"
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*)
		if test -z "$path"; then
			path="$item"
		else
			help "An unrecognised argument was provided: $item"
		fi
		;;
	esac
done

# ensure path
if test -z "$path"; then
	help "No path was provided."
fi

# =====================================
# Act

dirname="$(dirname "$path")"
filename="$(basename "$path")"
if test "$option_first" = 'yes'; then
	filename="${filename%%.*}"
else
	filename="${filename%.*}"
fi
if test "$option_basename" = 'yes'; then
	echo "$filename"
else
	echo "$dirname/$filename"
fi
