#!/usr/bin/env bash
source "$DOTFILES/sources/strict.bash"
source "$DOTFILES/sources/arrays.bash"
requires_array_support 'mapfile' 'empty'

# =====================================
# Start

echo-segment --h1="Setup Ruby"

# =====================================
# Configuration

source "$DOTFILES/sources/config.bash"

# environment provides:
# GEM_HOME

# environment.bash provides:
# HOMEBREW_RUBY_VERSION

# setup.bash provides:
GEM_INSTALL=()
RUBY_INSTALL=() # deprecated, use GEM_INSTALL
load_dotfiles_config 'setup.bash'

# adjustments
mapfile -t GEM_INSTALL < <(prepare_packages 'GEM_INSTALL' -- "${GEM_INSTALL[@]}" "${RUBY_INSTALL[@]}")

# =====================================
# Install

# install a specific ruby version via homebrew if supported
brew_ruby='ruby'
if test -n "${HOMEBREW_RUBY_VERSION-}" -a "${HOMEBREW_RUBY_VERSION-}" != 'default'; then
	brew_ruby="ruby@${HOMEBREW_RUBY_VERSION}"
fi

# perform the installation
env CLI=ruby \
	APK=ruby \
	APT='ruby-full' \
	BREW="$brew_ruby" \
	PACMAN=ruby \
	YUM=ruby-devel \
	setup-util

# =====================================
# Selection

# Use only a single ruby version
if test -n "${HOMEBREW_PREFIX-}"; then
	if test -z "${HOMEBREW_RUBY_VERSION-}" -o ! -d "$HOMEBREW_PREFIX/opt/ruby@${HOMEBREW_RUBY_VERSION-}"; then
		# discover
		__version_options=()
		mapfile -t rubyBinDirectories < <(expand-path "$HOMEBREW_PREFIX/opt/ruby*/bin")
		for __bin_directory in "${rubyBinDirectories[@]}"; do
			__executable="$__bin_directory/ruby"
			__directory="$(basename "$(fs-parent "$__bin_directory")")"
			__directory_version="${__directory#*@}"
			__full_version="$("$__executable" --version)"
			if test "$__directory_version" = "$__directory"; then
				__directory_version='default'
			fi
			__version_options+=(
				"$__directory_version"
				"$(
					echo-style \
						--bold="$__directory_version" \
						$'\n  ' --dim="$__full_version" \
						$'\n  ' --dim="$__executable"
				)"
			)
		done

		# select
		HOMEBREW_RUBY_VERSION="$(
			choose-option \
				--question='There are multiple homebrew ruby versions installed, which version do you wish to prefer?' \
				--label -- "${__version_options[@]}"
		)"

		# apply
		config-helper \
			--file="$DOTFILES/user/config/environment.bash" -- \
			--field='HOMEBREW_RUBY_VERSION' --value="$HOMEBREW_RUBY_VERSION"
	fi

	echo-style --dim="Homebrew Ruby Version: $HOMEBREW_RUBY_VERSION"
fi

# =====================================
# Caches

# Clear caches that can conflict with paths and old installs
# Use only the intended one, which is GEM_HOME

echo-segment --h2="Pruning cache"
if test -d "$HOME/.gem"; then
	echo-style --dim="Pruning:       $HOME/.gem"
	rm -Rf "$HOME/.gem"
fi
if test -d "$HOME/.ruby"; then
	echo-style --dim="Pruning:       $HOME/.ruby"
	rm -Rf "$HOME/.ruby"
fi
if test -n "${GEM_HOME-}"; then
	if test -d "$GEM_HOME"; then
		echo-style --dim="Pruning:       $GEM_HOME"
		rm -Rf "$GEM_HOME"
	fi
	mkdir -p "$GEM_HOME"
fi
echo-segment --g2="Pruning cache"

# =====================================
# Reload

# reload
echo-style --h2="Reload paths to help changes be detected..."
source "$DOTFILES/sources/environment.sh"

# check
if ! command-exists gem; then
	echo-style --e2='Unable to find [gem] executable, so cannot proceed... ❌' >/dev/stderr
	exit 1
fi
echo-style \
	--dim="Ruby Path:      $(which ruby)" $'\n' \
	--dim="Ruby Version:   $(ruby --version)" $'\n' \
	--dim="Gem Path:       $(which gem)" $'\n' \
	--dim="Gem Version:    $(gem --version)"

# =====================================
# Update

# As we wipe gems each time, this is no longer needed
# also, it causes the following error on apt systems
# ERROR:  Your RubyGems was installed trough APT, and upgrading it through RubyGems
# 	itself is unsupported. If you really need the latest version of RubyGems (tip:
# 	you usually don't), then you need to install RubyGems (and Ruby) manually,
# 	maybe using tools like ruby-install, rvm, etc.
# echo -e '\nUpdating ruby gems...'
# gem update --system

# =====================================
# Packages

# install
function gem_install_each {
	local name version
	echo-segment --h2="Installing $# ruby gems"
	for package in "$@"; do
		name="${package% *}"
		version="${package#* }" # will be the same as name, if no version was provided
		if test "$version" = "$name"; then
			version=''
		fi
		env NAME="gem:$name" GEM="$name" GEM_VERSION="$version" setup-util gem
	done
	echo-segment --g2="Installed $# ruby gems"
}
gem_install_each "${GEM_INSTALL[@]}"

# =====================================
# Finish

echo-segment --g1="Setup Ruby"
