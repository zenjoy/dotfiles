#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091
source "$DOTFILES/sources/strict.bash"
source "$(which eval-collapse)"

# =====================================
# Start

echo-segment --h1='Setup Go'

# =====================================
# Configuration

source "$DOTFILES/sources/config.bash"

# setup.bash provides:
GO_INSTALL=()
GO_LINTING_INSTALL='' # '', 'yes', 'no'
load_dotfiles_config 'setup.bash'

# adjustments
mapfile -t GO_INSTALL < <(prepare_packages 'GO_INSTALL' -- "${GO_INSTALL[@]}")

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		USAGE:
		setup-go [--flags]

		FLAGS:
		--configure            Configuration guide.
		--linting              Install linting tools.
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
reconfigure='no'
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--no-linting'* | '--linting'*)
		GO_LINTING_INSTALL="$(get-flag-value linting --missing="$GO_LINTING_INSTALL" -- "$item" | echo-affirmative || :)"
		;;
	'--no-configure'* | '--configure'*)
		reconfigure="$(get-flag-value configure --missing="$reconfigure" -- "$item" | echo-affirmative)"
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) help "An unrecognised argument was provided: $item" ;;
	esac
done

# =====================================
# Install

setup-util-go
source "$DOTFILES/sources/environment.sh"

# =====================================
# Adjustments

# determine full value for GO_LINTING_INSTALL
if test -z "$GO_LINTING_INSTALL" -o "$reconfigure" = 'yes'; then
	reconfigure='yes'
	if confirm-negative --ppid=$$ -- "Do you also want to install go linting packages? This is desired if you plan to code with go."; then
		GO_LINTING_INSTALL='yes'
	else
		GO_LINTING_INSTALL='no'
	fi
fi

# if yes, then install the linting tools
if test "$GO_LINTING_INSTALL" = 'yes'; then
	# https://github.com/golang/vscode-go/blob/master/docs/tools.md
	# https://github.com/golang/tools/blob/master/gopls/README.md
	GO_INSTALL+=(
		golang.org/x/tools/gopls
		github.com/go-delve/delve/cmd/dlv
		# github.com/uudashr/gopkgs/cmd/gopkgs
		github.com/ramya-rao-a/go-outline
		# github.com/haya14busa/goplay/cmd/goplay
		github.com/fatih/gomodifytags
		github.com/josharian/impl
		github.com/cweill/gotests/...
	)
fi

# =====================================
# Packages

function go_install_each() {
	echo-segment --h2="Install $# go packages"
	for item in "$@"; do
		env NAME="go:$item" OPTIONAL='yes' GO="$item" setup-util go
	done
	echo-segment --g2="Install $# go packages"
}
go_install_each "${GO_INSTALL[@]}"

# =====================================
# Extras

# If gometalinter exists, complete its installation.
if command-exists gometalinter; then
	echo-segment --h2="[gometalinter] dependencies"
	eval_collapse --- gometalinter --install || :
	echo-segment --g2="[gometalinter] dependencies"
fi

# =====================================
# Configure

if test "$reconfigure" = 'yes'; then
	update_dotfiles_user_config 'setup.bash' -- \
		--field='GO_LINTING_INSTALL' --value="$GO_LINTING_INSTALL"
fi

# =====================================
# Finish

echo-segment --g1='Setup Go'
