#!/usr/bin/env bash
source "$DOTFILES/sources/strict.bash"

# =====================================
# Configuration

source "$DOTFILES/sources/config.bash"

# git.bash provides:
GIT_DEFAULT_BRANCH=''
load_dotfiles_config 'git.bash'

# defaults
if test -z "$GIT_DEFAULT_BRANCH"; then
	# try local first, then global
	GIT_DEFAULT_BRANCH="$(git config --local init.defaultBranch || git config --global init.defaultBranch || :)"
fi

# =====================================
# Action

# helpers
function does_remote_branch_exist {
	silent git rev-parse --verify --quiet "$1"
}
function does_local_branch_exist {
	test -n "$(git branch --list "$1")"
}

# remote
if test -n "$GIT_DEFAULT_BRANCH" && does_remote_branch_exist "$GIT_DEFAULT_BRANCH"; then
	echo "$GIT_DEFAULT_BRANCH"
	exit 0
elif does_remote_branch_exist main; then
	echo main
	exit 0
elif does_remote_branch_exist master; then
	echo master
	exit 0
fi

# local
if test -n "$GIT_DEFAULT_BRANCH" && does_local_branch_exist "$GIT_DEFAULT_BRANCH"; then
	echo "$GIT_DEFAULT_BRANCH"
	exit 0
elif does_local_branch_exist main; then
	echo main
	exit 0
elif does_local_branch_exist master; then
	echo master
	exit 0
fi

# no branches?
if test -z "$(git branch -a)"; then
	# use default
	if test -n "$GIT_DEFAULT_BRANCH"; then
		silent git checkout -b "$GIT_DEFAULT_BRANCH"
		echo "$GIT_DEFAULT_BRANCH"
		exit 0
	else
		cat <<-EOF >/dev/stderr
			No branches exist locally or remotely and [GIT_DEFAULT_BRANCH] is not specified, so no default branch was created.

			Inside your [git.bash] configuration file, set [GIT_DEFAULT_BRANCH] to your desired default branch, then try again.
		EOF
		exit 1
	fi
else
	cat <<-EOF >/dev/stderr
		No default branch exists within the available branches:
		$(git branch -a)

		If one of these is a default branch, then
		inside your [git.bash] configuration file, set [GIT_DEFAULT_BRANCH] to the default branch, then try again.

		Currently, [GIT_DEFAULT_BRANCH] = [$GIT_DEFAULT_BRANCH]
	EOF
	exit 1
fi
