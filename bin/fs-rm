#!/usr/bin/env bash
source "$DOTFILES/sources/strict.bash"

# dependencies
env QUIET=yes setup-util-dust

# prepare
prompt_remove='yes'
if test "${1-}" = '--no-remove'; then
	prompt_remove='no'
fi
path="$1"
path_absolute="$(fs-absolute "$path")"
conclusion=''

# helper
function fs_rm() {
	# is the path missing
	if test ! -e "$path"; then
		conclusion="$(
			echo-style --green="was previously removed."
		)"
		return
	fi
	# path exists

	# note its size
	find "$path" -empty -type d -delete || :
	if test ! -e "$path"; then
		conclusion="$(
			echo-style --green="was only empty directories, it has been removed."
		)"
		return
	fi
	# there are leftovers

	# log them
	cat <<-EOF

		$(echo-eval ls -la "$path")

		$(echo-eval dust --no-percent-bars "$path")

		$(echo-eval dust --no-percent-bars --filecount "$path")

	EOF

	# confirm their removal
	if test "$prompt_remove" = 'yes' && confirm-positive --ppid=$$ -- "$(
		echo-style --notice="Confirm removal of non-empty" --bold=" $path_absolute " --notice="?"
	)"; then
		rm -Rfv "$path" || : # may or may not remove
	fi

	# fail if not removed
	if test -e "$path"; then
		conclusion="$(
			echo-style --red="has non-empty files, it has been kept."
		)"
		return 66 # Directory not empty
	fi

	# success if removed
	conclusion="$(
		echo-style --green="had non-empty files, it was manually removed."
	)"
}

# act with wrapping of success
title="fs-rm $(echo-quote "$path" || :)"
echo-segment --h2="$title"
if fs_rm; then
	echo-segment --g2="$title" " $conclusion"
else
	echo-segment --e2="$title" " $conclusion"
fi
