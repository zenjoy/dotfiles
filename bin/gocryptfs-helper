#!/usr/bin/env bash
source "$DOTFILES/sources/strict.bash"
source "$DOTFILES/sources/arrays.bash"
requires_array_support 'mapfile'

# https://github.com/rfjakob/gocryptfs/blob/master/Documentation/MANPAGE.md

# =====================================
# Checks

# dependencies
env QUIET=yes setup-util-gocryptfs
source "$DOTFILES/sources/ripgrep.bash"

# =====================================
# Arguments

# prepare
actions=(
	compare
	features
	info
	migrate
	mount
	unmount
	upgrade
	verify
	version
)

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Wrappers around gocryptfs to make things easier.

		USAGE:
		gocryptfs-helper <action> -- [...args]


		ACTIONS:

		compare -- <vault-one> <vault-two>
		Compares the features of two vaults, returning 0 if the same.

		features -- <vault>
		Outputs the enabled feature flags of teh gocryptfs vault.

		info -- <vault>
		Prints information about gocryptfs version, speed, and vault information.

		migrate -- <vault>
		Upgrades the gocryptfs vault to the best algorithm for it, this can take a while.

		mount -- <vault> <mount-point> [--owner=<owner>] [--user=<user>] [--group=<group>]
		Mounts the vault at the mount-point.

		unmount -- <mount-pount>
		Unmounts the mount-point.

		upgrade -- <vault>
		Upgrades the gocryptfs version.

		version
		Prints the version of gocryptfs.

		verify -- <vault>
		Verifies that the path is a gocryptfs vault.
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
action=''
action_args=()
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--action='*) action="${item:9}" ;;
	'--')
		action_args+=("$@")
		shift $#
		break
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*)
		if test -z "$action"; then
			action="$item"
		else
			help "An unrecognised argument was provided: $item"
		fi
		;;
	esac
done

# ensure valid action
action="$(
	choose-option --required \
		--question='What action to perform?' \
		--filter="$action" -- "${actions[@]}"
)"

# =====================================
# Helpers

# -------------------------------------
# Minor Actions

function act_version() {
	gocryptfs --version | rg -o '20\d+-\d+-\d+'
}
function act_info() {
	local vault="${1-}"
	echo-eval -- gocryptfs --speed # dumps version info
	if test -n "$vault"; then
		echo-eval -- gocryptfs --info "$vault" # dumsps vault info
	fi
}
function act_verify() {
	local vault="$1"
	if test -f "$1/gocryptfs.conf"; then
		echo-style --success="${vault@Q} is a gocryptfs vault"
	else
		echo-style --error="${vault@Q} is not a gocryptfs vault"
		return 1
	fi
}
function act_features() {
	local vault="$1"
	gocryptfs --info "$vault" | grep FeatureFlags
}
function act_compare() {
	local old_vault="$1" new_vault="$2" ec=0
	local old_vault_features new_vault_features
	old_vault_features="$(
		act_features "$old_vault"
	)"
	new_vault_features="$(
		act_features "$new_vault"
	)"

	# compare the features
	if test "$old_vault_features" = "$new_vault_features"; then
		echo-style --success="Vaults have the same features."
		ec=0
	else
		echo-style --notice="Vaults have different features."
		ec=1
	fi
	echo-element --open="$old_vault"
	echo "$old_vault_features"
	echo-element --close="$old_vault"
	echo-element --open="$new_vault"
	echo "$new_vault_features"
	echo-element --close="$new_vault"
	return "$ec"
}
function act_upgrade() {
	env FORCE=yes setup-util-gocryptfs
}
function act_mount() {
	# process
	local mount_source='' mount_target='' option_owner='' option_user='' option_group='' mount_cmd=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'help' | '--help' | '-h') help ;;
		'--owner='*) option_owner="${item:8}" ;;
		'--user='*) option_user="${item:7}" ;;
		'--group='*) option_group="${item:8}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$mount_source"; then
				mount_source="$item"
			elif test -z "$mount_target"; then
				mount_target="$item"
			elif test -z "$option_owner"; then
				option_owner="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test -z "$mount_source" -o -z "$mount_target"; then
		help "No paths were provided."
	fi

	# construct command
	if test -n "$option_owner" -o -n "$option_user" -o -n "$option_group"; then
		# https://github.com/rfjakob/gocryptfs/issues/638#issuecomment-1009578054
		mount_cmd+=('sudo')
		mount_cmd+=('--')
	fi
	mount_cmd+=(
		"gocryptfs"
		'--rw'
		'--noprealloc'
		'--allow_other'
	)
	if test -n "$option_owner"; then
		mount_cmd+=(
			'--force_owner'
			"$option_owner"
		)
	fi
	mount_cmd+=(
		"$mount_source"
		"$mount_target"
	)

	# mount
	cat <<-EOF
		$(echo-style --bold="Enter the cipher password for mounting:")
		${mount_source@Q} => ${mount_target@Q}
	EOF
	echo-eval -- "${mount_cmd[@]}"
	echo-eval -- ls -la "$mount_target"
	if test -n "$option_owner" -o -n "$option_user" -o -n "$option_group"; then
		echo-eval -- fs-own --owner="$option_owner" --user="$option_user" --group="$option_group" -- "$mount_target"
	fi
	echo
}

# -------------------------------------
# Migrate Action

function act_migrate {
	local old_vault="$1"
	local temp_dir new_vault old_plain new_plain algorithm

	# optional
	if is-raspi; then
		algorithm='xchacha'
	fi
	algorithm="$(
		choose-option \
			--question="Which algorithm to use for the new vault?" \
			--filter="$algorithm" -- aessiv xchacha
	)"

	# prepare mountpoints
	temp_dir="$(mktemp -d)"
	new_vault="$(fs-temp --directory="$temp_dir")"
	old_plain="$(fs-temp --directory="$temp_dir")"
	new_plain="$(fs-temp --directory="$temp_dir")"
	function ensure_clean_exit() {
		fs-unmount "$old_plain" || :
		fs-unmount "$new_plain" || :
		rm -Rfi "$temp_dir"
	}
	trap ensure_clean_exit RETURN

	# create
	echo
	if act_verify "$new_vault"; then
		cat <<-EOF
			$(echo-style --notice="The new vault [$new_vault] already exists...")
			This means a vault upgrade was started but not finished.
			We will continue with this vault, if you wish setup a new one, remove the old one first.
		EOF
	elif is-missing "$new_vault" || is-empty-ls "$new_vault"; then
		cat <<-EOF
			$(echo-style --bold="Creating a new vault vault at [$new_vault] with algorithm [$algorithm].")
		EOF
		gocryptfs --init --"$algorithm" "$new_vault"
		act_chown "$new_vault"
	else
		cat <<-EOF
			$(echo-style --error="Something already existed at [$new_vault] which was not a known vault structure...")
			Leaving for you to figure out.
			$(echo-eval -- ls -la "$new_vault")
		EOF
		return 1
	fi
	# gocryptfs --info "$new_vault"

	# verify there is a difference
	if act_compare "$old_vault" "$new_vault"; then
		echo-style --error="Vault migration is nonsensical, as both vaults have the same features."
		return 1
	fi

	# mount
	act_mount "$old_vault" "$old_plain"
	act_mount "$new_vault" "$new_plain"

	# speed
	if confirm-positive --ppid=$$ -- "Run a speed comparison?"; then
		fs-speed "$old_plain"
		fs-speed "$new_plain"
	fi

	# migrate
	cpr --remove --action=copy --tool=rsync \
		--source="${old_plain}/" \
		--destination="${new_plain}/"

	# replace
	echo
	echo "Prepping replacement:"
	fs-rm "$old_plain/" || :
	fs-size "$new_plain/"
	fs-unmount "$old_plain"
	fs-unmount "$new_plain"
	fs-size "$old_vault"
	fs-size "$new_vault"
	cat <<-EOF
		$(echo-style --bold="Confirm the following replacement:")
		Delete:  $old_vault
		Move:    $new_vault  =>  $old_vault
	EOF
	if ! confirm-bool --ppid=$$ -- "Proceed with replacement?"; then
		return 1
	fi
	fs-rm "$old_vault"
	sudo mv --verbose "$new_vault" "$old_vault"
	cat <<-EOF
		$(echo-style --bold="Replacement complete:")
		Deleted:  $old_vault
		Moved:    $new_vault  =>  $old_vault
	EOF

	# done
	cat <<-EOF
		$(echo-style --success="Migration complete. âœ…")
		When you are ready to start the sharebox with the migrated vault, run:
		$(echo-style --code="sharebox start")
	EOF
}

# =====================================
# Act

if test "$(type -t "act_$action")" = 'function'; then
	"act_$action" "${action_args[@]}"
	exit "$?"
else
	echo-style --error="Action [$action] not yet implemented." >/dev/stderr
	exit 78 # Function not implemented
fi
