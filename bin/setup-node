#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091,SC2016
source "$DOTFILES/sources/strict.bash"
source "$DOTFILES/sources/arrays.bash"
requires_array_support 'mapfile' 'empty'
source "$(which eval-collapse)"

# =====================================
# Start

echo-segment --h1="Setup Node.js"

# =====================================
# Configuration

source "$DOTFILES/sources/config.bash"

# environment.bash provides:
# NVM_DIR
# but in case it failed to:
if test -z "${NVM_DIR-}"; then
	export NVM_DIR="$HOME/.nvm"
fi

# setup.bash provides:
NPM_INSTALL=()
NODE_INSTALL=() # deprecated, use NPM_INSTALL
load_dotfiles_config 'setup.bash'

# adjustments
mapfile -t NPM_INSTALL < <(prepare_packages 'NPM_INSTALL' -- "${NPM_INSTALL[@]}" "${NODE_INSTALL[@]}")

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		USAGE:
		setup-node [--flags]

		FLAGS:
		--configure            Configuration guide.
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
reconfigure='no'
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--no-configure'* | '--configure'*)
		reconfigure="$(get-flag-value configure --missing="$reconfigure" -- "$item" | echo-affirmative)"
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) help "An unrecognised argument was provided: $item" ;;
	esac
done

# =====================================
# Install via System

# setup system node for global installs and vscode on mac
function install_homebrew_node() {
	# `reinstall ... || :` as well as `install ... || upgrade ... || :` are no longer necessary,
	# install does upgrade if it is already installed:
	# https://github.com/Homebrew/brew/pull/11525
	brew install node
	npm cache clean --force
}
if is-brew; then
	echo-segment --h2='Install Node.js via Homebrew'
	eval_collapse --no-wrap -- install_homebrew_node
	echo "Installed: $(node --version)"
	echo-segment --g2='Install Node.js via Homebrew'
fi

# =====================================
# Clean NVM

# clean NVM unless configured otherwise
# the intent of this is to purge unused global Node.js versions and packages
# we use a configuration variable to change this, as interuppting the flow and asking the user creates too much confusion
# as such a question is only necessary to experienced users
function get_nvm_versions() {
	source "$DOTFILES/sources/ripgrep.bash"
	source "$DOTFILES/sources/nvm.sh"
	nvm ls --no-colors --no-alias | rg -o 'v([^\s]+)' --replace '$1' || :
}
function clean_nvm() {
	# run a subshell, so nvm is only loaded for this
	# can't just do `trap 'nvm unload' RETURN` as `nvm unload` unsets NVM_DIR
	(
		source "$DOTFILES/sources/nvm.sh"
		# swap to system
		nvm use system || :
		# fetch versions
		mapfile -t versions < <(get_nvm_versions)
		if test "${#versions[@]}" -eq 0; then
			# already clean
			return 0
		fi
		# clean versions
		for version in "${versions[@]}"; do
			nvm uninstall "$version" | sed 's/Uninstalled node /Uninstalled: /'
		done
		# confirm clean was successful
		mapfile -t versions < <(get_nvm_versions)
		test "${#versions[@]}" -eq 0
	)
}
function wipe_nvm() {
	rm -Rf "$NVM_DIR"
}
function clean_otherwise_wipe_nvm() {
	# clean only what is necessary
	echo-segment --h3='Clean Node.js versions and packages'
	if clean_nvm; then
		echo-segment --g3='Clean Node.js versions and packages'
	else
		# nvm buggered, clean it all
		echo-segment --e3='Clean Node.js versions and packages'
		echo-segment --h3='Clean Node.js Version Manager (NVM) instead'
		wipe_nvm
		echo-segment --g3='Clean Node.js Version Manager (NVM) instead'
	fi
}
if test -d "$NVM_DIR"; then
	clean_otherwise_wipe_nvm
fi

# =====================================
# Install via NVM

# install nvm
function install_nvm() {
	if test -d "$NVM_DIR"; then
		cd "$NVM_DIR"
	else
		mkdir -p "$NVM_DIR"
		cd "$NVM_DIR"
		git init
		git remote add origin 'https://github.com/nvm-sh/nvm.git'
	fi
	# ensure git remote is usable
	# git-protocol-ensure
	git-protocol-apply origin https
	# fetch tags
	git fetch --tags origin
	# checkout latest stable tag
	# shellcheck disable=SC2006,SC2046
	git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
}
echo-segment --h2='Install Node.js Version Manager (NVM)'
echo-style --dim "NVM_DIR=$NVM_DIR"
eval_collapse --no-wrap -- install_nvm
echo-segment --g2='Install Node.js Version Manager (NVM)'

# install nvm node
function install_nvm_node() {
	source "$DOTFILES/sources/nvm.sh"

	# install
	nvm install node       # latest active
	nvm-2596 install --lts # latest LTS

	# set default node version
	if is-brew; then
		nvm alias default system
	else
		# use latest lts
		nvm alias default stable
		# use current lts: "$(nvm version-remote --lts)"
	fi

	# default
	nvm use default
}
echo-segment --h2='Install Node.js via NVM'
echo-style --dim='Installs active and LTS versions.'
eval_collapse --no-wrap -- install_nvm_node
mapfile -t versions < <(get_nvm_versions)
for version in "${versions[@]}"; do
	echo "Installed: v$version"
done
echo-segment --g2='Install Node.js via NVM'

# =====================================
# npm

source "$DOTFILES/sources/nvm.sh"

# -------------------------------------
# Upgrade

echo-segment --h2='Upgrade npm'
echo-style --dim="Before: $(npm --version)"
eval_collapse -- npm install -g npm --force
echo "After:  $(npm --version)"
echo-segment --g2='Upgrade npm'

# -------------------------------------
# Reconfiguration

# check
if
	is-empty-value "$(npm config get init.author.name)" ||
		is-empty-value "$(npm config get init.author.email)" ||
		is-empty-value "$(npm config get init.author.url)" ||
		is-empty-value "$(npm config get init.license)"
then
	reconfigure='yes'
fi

# reconfigure
if test "$reconfigure" = 'yes'; then
	echo-segment --h2='Configure npm'
	npm config set init.author.name "$(
		ask --required --confirm \
			--question="What is the profile name that you want to configure npm with?" \
			--default="$(get-profile name -- npm ... || :)"
	)"
	npm config set init.author.email "$(
		ask --required --confirm \
			--question="What is the profile email that you want to configure npm with?" \
			--default="$(get-profile email -- npm ... || :)"
	)"
	npm config set init.author.url "$(
		ask --required --confirm \
			--question="What is the profile homepage that you want to configure npm with?" \
			--default="$(get-profile url -- npm ... || :)"
	)"
	npm config set init.license "$(
		ask --required --confirm \
			--question="What license do you want to configure npm to default to?" \
			--default="$(npm config get init.license)"
	)"
	echo-segment --g2='Configure npm'
fi

# -------------------------------------
# Packages

# https://github.com/yarnpkg/yarn/issues/2993
function npm_install_bulk() {
	echo-segment --h2="Install $# npm packages"
	if test "$#" -ne 0; then
		env NAME="npm:$*" NPM="$*" setup-util npm
	fi
	echo-segment --g2="Install $# npm packages"
}
npm_install_bulk "${NPM_INSTALL[@]}"

# =====================================
# Finish

echo-segment --g1='Setup Node.js'
