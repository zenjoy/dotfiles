#!/usr/bin/env bash
source "$DOTFILES/sources/strict.bash"

# =====================================
# Arguments

# prepare
if test "${1-}" = '--'; then
	shift
fi
mount_point="${1-}"

# help
if is-help "$@" || test -z "$mount_point"; then
	cat <<-EOF >/dev/stderr
		ABOUT:
		Unmounts a mount point.

		USAGE:
		fs-unmount [--] <mount-point>
	EOF
	exit 22 # Invalid argument
fi

# =====================================
# Action

# prepare
conclusion=''

# helper
function fs_unmount {
	local ec

	# is the path missing
	if test ! -e "$mount_point"; then
		conclusion="$(
			echo-style --green="was previously unmounted."
		)"
		return
	fi
	# path exists

	# is mounted? then unmount
	while true; do
		if is-mounted --target="$mount_point"; then
			sudo umount --verbose --recursive "$mount_point" || {
				# https://github.com/rfjakob/gocryptfs/issues/459
				what-is-using "$mount_point" >/dev/tty
				ec=0 && confirm-positive --ppid=$$ -- "Yes for try again, no for force, ctrl+c for abort" || ec="$?"
				if test "$ec" -eq 1; then
					sudo umount --verbose --recursive --force "$mount_point"
				fi
			}
		else
			break
		fi
	done

	# check if still mounted
	if is-mounted --target="$mount_point"; then
		conclusion="$(
			echo-style --red="failed to unmount."
		)"
		return 66 # Directory not empty
	fi
	echo-style --success="${mount_point@Q} was unmounted."

	# clean up
	if test -e "$mount_point"; then
		sudo-inherit fs-rm "$mount_point"
	fi
	if test -e "$mount_point"; then
		conclusion="$(
			echo-style --red="unmount was successful, but failed to clean up."
		)"
		return 66 # Directory not empty
	fi
	echo-style --success="${mount_point@Q} was cleaned."

	# success
	conclusion="$(
		echo-style --green="unmounted and cleaned up."
	)"
}

# act
title="fs-unmount ${mount_point@Q}"
echo-segment --h2="$title"
if fs_unmount; then
	echo-segment --g2="$title" " $conclusion"
else
	echo-segment --e2="$title" " $conclusion"
fi
