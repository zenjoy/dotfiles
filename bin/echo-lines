#!/usr/bin/env bash
source "$DOTFILES/sources/strict.bash"
source "$DOTFILES/sources/arrays.bash"
requires_array_support 'mapfile'

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		USAGE:
		echo-lines [...flags] [--] <...arg>
		# ^ outputs each argument on a separate line

		FLAGS:
		--columns=<columns>
		# ^ output as many arguments per line as there are specified columns

		--indent=<indent>
		# ^ prefix each line with the indentation

		--quoted=<yes/no>
		# ^ if yes, the arguments will be quoted if necessary
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
columns=1
indent=''
quoted='no'
args=()
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--columns='*) columns="${item:10}" ;;
	'--indent='*) indent="${item:9}" ;;
	'--no-quoted'* | '--quoted'*) quoted="$(get-flag-value quoted --missing="$quoted" -- "$item" | echo-affirmative)" ;;
	'--')
		args+=("$@")
		shift $#
		break
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) args+=("$item") ;;
	esac
done

# =====================================
# Act

# prepare format
format='%s\n'
for ((i = 1; i < "$columns"; i++)); do
	format="%s\t$format"
done
if test -n "$indent"; then
	format="${indent}${format}"
fi

# output
# shellcheck disable=SC2059
if test "$quoted" = 'yes'; then
	quoted=()
	for arg in "${args[@]}"; do
		quoted+=("$(echo-quote "$arg")")
	done
	args=("${quoted[@]}")
fi
# shellcheck disable=SC2059
printf "$format" "${args[@]}"
