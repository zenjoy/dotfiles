#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091
source "$DOTFILES/sources/strict.bash"

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		USAGE:
		eval-tester <...flags> -- <command> [<...args>]

		FLAGS:
		[--ec=<expected exit code>]
		[--stdout=<expected stdout>]
		[--stderr=<expected stderr>]
		[--debug]
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
option_ec='0'
option_stdout=''
option_stderr=''
option_debug='no'
args=()
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--ec='*) option_ec="${item:5}" ;;
	'--stdout='*) option_stdout="${item:9}" ;;
	'--stderr='*) option_stderr="${item:9}" ;;
	'--no-debug'* | '--debug'*) option_debug="$(get-flag-value debug --missing="$option_debug" -- "$item" | echo-affirmative)" ;;
	'--')
		args+=("$@")
		shift $#
		break
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) help "An unrecognised argument was provided: $item" ;;
	esac
done

# overrides
if test "$option_debug" = 'yes'; then
	set -x
	args=('debug-bash' "${args[@]}")
fi

# =====================================
# Action

# run the command
fail='no'
stdout="$(mktemp)"
stderr="$(mktemp)"
cmd="$(echo-quote "${args[@]}" || :)"
echo-segment --h3="$cmd"
ec=0 && ("${args[@]}") >"$stdout" 2>"$stderr" || ec="$?"

# test exit code
if test "$option_ec" -ne "$ec"; then
	echo-style --red="Actual Exit Code [$ec]  !=  Expected Exit Code [$option_ec]"
	fail='yes'
else
	echo-style --green="Actual Exit Code [$ec]  ==  Expected Exit Code [$option_ec]"
fi

# test stdout
if test -n "$option_stdout"; then
	if test "$option_stdout" != "$(cat "$stdout")"; then
		echo-style --red="Actual Stdout  !=  Expected Stdout"
		echo-style --h3='< actual stdout>'
		cat "$stdout"
		echo-style --h3='</ actual stdout>'
		echo-style --h3='< expected stdout>'
		echo "$option_stdout"
		echo-style --h3='</ expected stdout>'
		fail='yes'
	else
		echo-style --green="Actual Stdout  ==  Expected Stdout"
	fi
fi

# test stderr
if test -n "$option_stderr"; then
	if test "$option_stderr" != "$(cat "$stderr")"; then
		echo-style --red="Actual Stderr  !=  Expected Stderr"
		echo-style --h3='< actual stderr>'
		cat "$stderr"
		echo-style --h3='</ actual stderr>'
		echo-style --h3='< expected stderr>'
		echo "$option_stderr"
		echo-style --h3='</ expected stderr>'
		fail='yes'
	else
		echo-style --green="Actual Stderr  ==  Expected Stderr"
	fi
fi

# pass or fail
if test "$fail" = 'yes'; then
	echo-segment --e3="$cmd"
	echo
	exit 1
else
	echo-segment --g3="$cmd"
	echo
fi
