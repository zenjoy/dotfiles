# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
# # Fig pre block. Keep at the top of this file.
# # shortcut to this dotfiles path is $DOTFILES
export DOTFILES=$HOME/.dotfiles

# ensure the correct locales are used
export LANG="nl_BE.UTF-8"
export LC_COLLATE="nl_BE.UTF-8"
export LC_CTYPE="nl_BE.UTF-8"
export LC_MESSAGES="nl_BE.UTF-8"
export LC_MONETARY="nl_BE.UTF-8"
export LC_NUMERIC="nl_BE.UTF-8"
export LC_TIME="nl_BE.UTF-8"

if [[ -a "$HOME/Library/Application Support/iTerm2/DynamicProfiles/zenjoy.profile.plist" ]]; then
	echo -e "\033]50;SetProfile=Zenjoy\a"
	tput reset
fi

# Load Homebrew, path is depending on CPU architecture
arch_name="$(uname -m)"
if [[ "${arch_name}" = "x86_64" ]]; then
  if [[ -f "/usr/local/bin/brew" ]]; then
    if [[ "$(sysctl -n -q sysctl.proc_translated)" = "1" ]]; then
      echo "Terminal Running on Rosetta 2"
    else
      # Running on native Intel
    fi 

    eval "$(/usr/local/bin/brew shellenv)"
  fi
elif [[ "${arch_name}" = "arm64" ]]; then
  # Running on M1
  if [[ -f "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi
elif [[ "${arch_name}" = "aarch64" ]]; then
  # Running on ARM-based linux, there is no Linuxbrew on ARM64
fi

# Load rbenv
if [[ -d "$HOMEBREW_PREFIX/rbenv" ]]; then
  export RBENV_ROOT="$HOMEBREW_PREFIX/rbenv"
  export PATH="$RBENV_ROOT/bin:$RBENV_ROOT/shims:$PATH"
  eval "$(rbenv init -)"
fi

if [[ -d "$HOME/.rbenv" ]]; then
  export RBENV_ROOT="$HOME/.rbenv"
  export PATH="$RBENV_ROOT/bin:$RBENV_ROOT/shims:$PATH"
  eval "$(rbenv init -)"
fi

if [[ -d "$HOME/.zcompcache" ]]
then
	export ZSH_CACHE_DIR=$HOME/.zcompcache
fi

if [[ -a "$DOTFILES/.multiuser" ]]
then
	# skip verification of insecure directories (to allow multiuser setups)
	export ZSH_DISABLE_COMPFIX="true"
fi

# macOS 12.3 deprecates python 2.7 and removed the command
if [[ -d "$HOMEBREW_PREFIX/opt/python@3.9/libexec/bin" ]]; then
  export PATH="$HOMEBREW_PREFIX/opt/python@3.9/libexec/bin:$PATH"
fi

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# We'll leave this blank and use the async Pure prompt
ZSH_THEME=""

# Pure Prompt Customization
PURE_PROMPT_SYMBOL="○"
#PURE_PROMPT_DIR_TRUNC_PREFIX="…/"
PURE_PROMPT_DIR_TRUNC="3"
PURE_PROMPT_GIT_SYMBOL="\ue725 "
PURE_PROMPT_KUBECONTEXT_SYMBOL="\ue7b2 "
PURE_PROMPT_KUBECONTEXT_SHOW=false
PURE_PROMPT_TERRAFORM_SYMBOL="\uf9fd"

# Comment following line if you do not want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Enable fig if it is installed: do this before sourcing oh-my-zsh otherwise 
# smart history no longer works (see https://github.com/withfig/fig/issues/425)

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
plugins=(
  asdf
  brew
  droplr
  docker
  docker-compose
  extract
  encode64
  fast-syntax-highlighting
  gem
  gitignore
  git-extras
  git-hubflow
  git-it-on
  httpie
  iterm2
  iosctl
  oh-my-matrix
  macos
  npm
  react-native
  vagrant
  xcode
  vault
  zshmarks
  zsh-brew-services
  zsh-autosuggestions
  zsh-completions)

# Load any cached paths upfront
if [[ -a $ZSH/cache/zsh_plugin_paths ]]; then
	source $ZSH/cache/zsh_plugin_paths
fi

if [[ ! -z "$FZF_BASE" ]]; then
	plugins+=('fzf')
fi

# only load alias tips when python is installed
if command -v python >/dev/null 2>&1; then
	plugins+=('alias-tips')
fi

# Load them all
source $ZSH/oh-my-zsh.sh

# your project folder that we can `c [tab]` to
export PROJECTS=~/Development

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.localrc ]]; then
  source ~/.localrc
fi


# all of our zsh files
typeset -U config_files
config_files=($DOTFILES/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# Speeds up load time
DISABLE_UPDATE_PROMPT=true

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

# completion; use cache if updated within 24h
autoload -Uz compinit
setopt EXTENDEDGLOB
if [[ -n $HOME/.zcompdump(#qN.mh+24) ]]; then
  compinit -d $HOME/.zcompdump;
else
  compinit -C;
fi;

unset config_files

export CC=/usr/bin/gcc

# Put local stuff that you want at the end of everything in here
if [[ -a ~/.localrc.late ]]; then
	source ~/.localrc.late
fi

# support asdf
if [[ -a $HOMEBREW_PREFIX/opt/asdf/asdf.sh ]]; then
	source $HOMEBREW_PREFIX/opt/asdf/asdf.sh
fi

if [[ -a $HOMEBREW_PREFIX/opt/asdf/etc/bash_completion.d/asdf.bash ]]; then
	source $HOMEBREW_PREFIX/opt/asdf/etc/bash_completion.d/asdf.bash
fi

# support autojump
if command -v autojump >/dev/null 2>&1; then
	. $HOMEBREW_PREFIX/etc/autojump.sh
fi

# allow zeus and unicorn to fork
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# Customize iTerm2 Touchbar integration
export TOUCHBAR_GIT_ENABLED=true
export GIT_UNCOMMITTED="+"
export GIT_UNSTAGED="!"
export GIT_UNTRACKED="?"
export GIT_STASHED="$"
export GIT_UNPULLED="⇣"
export GIT_UNPUSHED="⇡"
export YARN_ENABLED=true

# Fix direcory autocompletion when using autosuggestions
ZSH_AUTOSUGGEST_IGNORE_WIDGETS+=(expand-or-complete)
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

# Check for update of the dotfiles
if [ "$DISABLE_AUTO_UPDATE" != "true" ]; then
  env DOTFILES=$DOTFILES DISABLE_UPDATE_PROMPT=$DISABLE_UPDATE_PROMPT zsh -f $DOTFILES/tools/check_for_upgrade.sh
fi

if [[ -a $HOME/.config/yarn/global/node_modules/.bin ]]; then
	export PATH="$HOME/.config/yarn/global/node_modules/.bin:$PATH"
fi

if [[ -a $HOME/.yarn/bin ]]; then
	export PATH="$HOME/.yarn/bin:$PATH"
fi

if command -v direnv >/dev/null 2>&1; then
	eval "$(direnv hook zsh)"
fi

# Setup our prompt
prompt_pure_setup

# # Fig post block. Keep at the bottom of this file.
#

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"

# Enable GPG signing
export GPG_TTY=$(tty)
