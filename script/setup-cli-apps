#!/usr/bin/env bash
set +e
proceed=1
result=0

DOTFILES_ROOT="$HOME/.dotfiles"
LOGFILE=/tmp/dotfiles-setup

. $DOTFILES_ROOT/script/shared-functions

echo "Running in $0 ${BASH_VERSION}" >> $LOGFILE

# ensure we capture unexpected exits
trap exit_warning EXIT

cli_apps=(
  "--Development Tools"

  "httpie|a user-friendly http client|command -v http|brew install httpie|https://httpie.org/"
  "jq|json processor|command -v jq|brew install jq|https://stedolan.github.io/jq/"
  "fx|json processor|command -v fx|brew install fx|https://github.com/antonmedv/fx#readme"
  "howdoi|check stackoverflow|command -v howdoi|pip install howdoi|https://github.com/gleitz/howdoi#readme"
  "tldr|summarized command help|command -v tldr|npm install -g tldr|https://tldr.sh/"
  "mklicense|cli tool for generating licenses|command -v mklicense|npm install -g mklicense|https://github.com/cezaraugusto/mklicense#readme"
  "dockly|managing Docker containers|command -v dockly|npm install -g dockly|https://github.com/lirantal/dockly#readme"
  "serve|easy to use static file server|command -v serve|npm install -g serve|https://github.com/zeit/serve#readme"
  "add|itignore (generates a .gitignore for your project|command -v add-gitignore|npm install -g add-gitignore|https://github.com/TejasQ/add-gitignore#readme"
  "carbon|ow (beautiful images of your code|command -v carbon-now|npm i -g carbon-now-cli|https://github.com/mixn/carbon-now-cli#readme"
  "bat|a cat clone with wings|command -v bat|brew install bat|https://github.com/sharkdp/bat#readme"
  "ag|lightning-fast code search|command -v ag|brew install the_silver_searcher|https://geoff.greer.fm/ag/"
  "fd|a simple, fast and user-friendly alternative to find|command -v fd|brew install fd|https://github.com/sharkdp/fd/#readme"
  "nnn|lightning fast, feature-packed file manager|command -v nnn|brew install nnn|https://github.com/jarun/nnn#nnn"

  "--Frontend Development"

  "caniuse|check caniuse.com|command -v caniuse|npm install -g caniuse-cmd|https://github.com/sgentle/caniuse-cmd#how-do"
  "pageres|capture screenshots of websites|command -v pageres|npm install -g pageres-cli|https://github.com/sindresorhus/pageres-cli#pageres-cli--"
  "capture-website|capture screenshots of websites|command -v capture-website|npm install -g capture-website-cli|https://github.com/sindresorhus/capture-website-cli#usage"
  "imgp|multi-core batch image resizer and rotator|command -v imgp|pip3 install pillow|https://github.com/jarun/imgp#imgp"
  "imageoptim-cli|CLI for ImageOptim, ImageAlpha and JPEGmini|command -v imageoptim|npm install -g imageoptim-cli|https://imageoptim.com/command-line.html"
  "pastel|Generate, analyze, convert and manipulate colors|command -v pastel|brew install pastel|https://github.com/sharkdp/pastel"

  "--Mobile Development"

  "mobicon|mobile app icon generator|command -v mobicon|npm install -g mobicon-cli|https://github.com/SamVerschueren/mobicon-cli#usage"
  "mobisplash|mobile app splash screen generator|command -v mobisplash|npm install -g mobisplash-cli|https://github.com/SamVerschueren/mobisplash-cli#usage"
  "dframe|put device frames around app screenshots|command -v dframe|npm install -g deviceframe|https://github.com/c0bra/deviceframe#use-it"
  "viewport-list|list of devices and their viewports|command -v viewport-list|npm install -g viewport-list-cli|https://github.com/kevva/viewport-list-cli#usage"

  "--Backend Development"

  "aws|universal cli for amazon web services|command -v aws|pip install awscli|https://aws.amazon.com/cli/"
  "s3cmd|fully-featured s3 client|command -v s3cmd|pip install s3cmd|https://s3tools.org/usage"
  "loadtest|run a load test on the selected url|command -v loadtest|npm install -g loadtest|https://github.com/alexfernandez/loadtest#usage"
  "speedtest-net|test your internet speed|command -v speedtest-net|npm install -g speedtest-net|https://github.com/sivel/speedtest-cli#usage"
  "fast-cli|test your internet speed using fast.com|command -v fast|npm install -g fast-cli|https://github.com/sindresorhus/fast-cli#usage"
  "pretty-ms|convert milliseconds to a human readable string|command -v pretty-ms|npm install -g pretty-ms-cli|https://github.com/sindresorhus/pretty-ms#usage"

  "--Git Things"

  "hub|tool that wraps git|command -v hub|brew install hub|https://hub.github.com/hub.1.html"
  "git-secret|stores private data inside a git repo|brew ls --versions git-secret|brew install git-secret|https://git-secret.io/"
  "git-extras|repo summary, repl, changelog, commit percentages, etc.|brew ls --versions git-extras|brew install git-extras|https://github.com/tj/git-extras/blob/master/Commands.md"
  "ohshit|helps you unfuck your git mistake|command -v ohshit|npm install -g ohshitgit|https://ohshitgit.com/"
  "gitmoji|use gitmojis on commit messages|command -v gitmoji|npm i -g gitmoji-cli|https://github.com/carloscuesta/gitmoji-cli"

  "--Convenience Stuff"

  "fkill|fabulously kill processes|command -v fkill|npm install -g fkill-cli|https://github.com/sindresorhus/fkill-cli#usage"
  "colorls|colorized ls command|command -v colorls|gem install colorls|https://github.com/athityakumar/colorls#readme"
  "exa|a modern replacement for ls|command -v exa|brew install exa|https://the.exa.website/"
  "gfi|google font installer|command -v gfi|npm install -g google-font-installer|https://github.com/lordgiotto/google-font-installer#readme"
  "fuck|autocorrects error in previous command|command -v fuck|brew install thefuck|https://github.com/nvbn/thefuck#readme"
  "undollar|undollar strips the dollar sign from copy/pasted commands|command -v $|npm install -g undollar|github.com/ImFeelingDucky/undollar#readme"
  "kill-tabs|kill all Chrome tabs to improve performance|command -v kill-tabs|npm install -g kill-tabs|https://github.com/sindresorhus/kill-tabs#readme"
  "autojump|cd command that learns where you went|command -v autojump|brew install autojump|https://github.com/wting/autojump#readme"
  "ffsend|Fully featured Firefox Send client|command -v ffsend|brew install ffsend|https://github.com/timvisee/ffsend#readme"
  "csvkit|Utilities for converting to and working with CSV|command -v in2csv|brew install csvkit|http://csvkit.rtfd.org/"
  "xsv|Another fast CSV command line toolkit|command -v xsv|brew install xsv|https://github.com/BurntSushi/xsv#readme"
  "ncdu|A handy disk usage analyzer|command -v ncdu|brew install ncdu|https://dev.yorhel.nl/ncdu"
  "noti|Show a notification at the end of a process|command -v noti|brew install noti|https://github.com/variadico/noti#readme"
  "entr|Run arbitrary commands when files change|command -v entr|brew install entr|http://eradman.com/entrproject/"
  "wipe-modules|A little agent that removes the node_modules folder of non-active projects üóëÔ∏è|command -v wipe-modules|npm install -g wipe-modules|https://github.com/bntzio/wipe-modules"

  "--Information & Search"

  "bitly-client|make and manage bitly/zenjoy.me shortlinks|command -v bitly-client|npm install -g bitly-client|https://github.com/specious/bitly-client#readme"
  "haxor-news|hacker news reader|command -v hn|pip install haxor-news|https://github.com/donnemartin/haxor-news#readme"
  "googler|google cli|command -v googler|brew install googler|https://github.com/jarun/googler#readme"
  "is-up|check website via isitup.org|command -v is-up|npm install -g is-up-cli|https://github.com/sindresorhus/is-up-cli#readme"
  "tty-clock|display a clock using tty-clock|command -v tty-clock|brew install tty-clock|https://github.com/xorg62/tty-clock"

  "--DevOps Stuff"

  "agrind|slice and dice log files on the command line|command -v agrind|brew install angle-grinder|https://github.com/rcoh/angle-grinder#readme"
  "prettyping|simply a better ping|command -v prettyping|brew install prettyping|http://denilson.sa.nom.br/prettyping/"
  "htop|a better top|command -v htop|brew install htop|https://hisham.hm/htop/"

  "--OSX Management / Helpers"

  "m-cli|swiss army knife for macOS|command -v m|brew install m-cli|https://github.com/rgcr/m-cli#readme"
  "mas-cli|command line interface for the Mac App Store|command -v mas|brew install mas|https://github.com/mas-cli/mas#readme"
  "brightness|manage screen brightness|command -v brightness|npm install -g brightness-cli|https://github.com/kevva/brightness-cli#usage"
  "volume|manage volume|command -v volume|npm install -g gillstrom/vol-cli|https://github.com/gillstrom/vol-cli#usage"
  "battery-level|get battery level|command -v battery-level|npm install -g battery-level-cli|https://github.com/gillstrom/battery-level-cli#readme"
  "screensaver|start screensaver|command -v screensaver|npm install -g screensaver|https://github.com/gillstrom/screensaver#readme"
  "organize|auto organize files based on file type|command -v organize|npm install -g organize-cli|https://github.com/ManrajGrover/organize-cli#readme"
  "rename|utility for renaming files|command -v rename|npm install -g rename-cli|https://github.com/jhotmann/node-rename-cli#readme"
  "trash|move files and folders to the trash|command -v trash|npm install -g trash-cli|https://github.com/sindresorhus/trash-cli#readme"
  "empty-trash|empty the trash|command -v empty-trash|npm install -g empty-trash-cli|https://github.com/sindresorhus/empty-trash-cli#readme"
  "public-ip|get your public ip address|command -v public-ip|npm install -g public-ip-cli|https://github.com/sindresorhus/public-ip-cli#readme"
  "wallpaper|get or set your wallpaper|command -v wallpaper|npm install -g wallpaper-cli|https://github.com/sindresorhus/wallpaper-cli#readme"

  "--Entertainment"

  "term-img|display images in iTerm|command -v term-img|npm install -g term-img-cli|https://github.com/sindresorhus/term-img-cli#readme"
  "splash|beautiful wallpapers from unsplash|command -v splash|npm install -g splash-cli|https://splash-cli.app/"
  "mplayer|command line music player|command -v mplayer|brew install mplayer|https://mplayerhq.hu"
  "youtube-dl|youtube downloader|command -v youtube-dl|brew install youtube-dl|https://ytdl-org.github.io/youtube-dl/index.html"
  "open-pip-cli|play movies in macos native picture-in-picture|command -v open-pip|npm install -g open-pip-cli|https://github.com/albinekb/open-pip-cli#readme"
  "mapscii|google maps in your terminal|command -v mapscii|npm install -g mapscii|https://github.com/rastapasta/mapscii#readme"
  "asciinema|record and share what happens in terminal|command -v asciinema|pip3 install asciinema|https://asciinema.org/"
  "tetris|well... play tetris in the terminal|command -v tetris|brew install vitetris|https://www.victornils.net/tetris/"
  "ninvaders|Space Invaders in the terminal|command -v ninvaders|brew install ninvaders|http://ninvaders.sourceforge.net/"
  "tty-solitaire|Solitaire in the terminal|command -v ttysolitaire|brew install tty-solitaire|https://github.com/mpereira/tty-solitaire"

  "--Fun"

  "cat-names|get popular cat names|command -v cat-names|npm install -g cat-names|https://github.com/sindresorhus/cat-names#readme"
  "dog-names|get popular dog names|command -v dog-names|npm install -g dog-names|https://github.com/sindresorhus/dog-names#readme"
  "pokemon|get pokemon names|command -v pokemon|npm install -g pokemon-cli|https://github.com/sindresorhus/pokemon-cli#readme"
  "superheroes|get superheroes names|command -v superheroes|npm install -g superheroes-cli|https://github.com/sindresorhus/superheroes-cli#readme"
  "supervillains|get supervillains names|command -v supervillains|npm install -g supervillains-cli|https://github.com/sindresorhus/supervillains-cli#readme"
  "cowsay|talk like a cow|command -v cowsay|brew install cowsay|https://nl.wikipedia.org/wiki/Cowsay"
  "ponysay|talk like a poney|command -v ponysay|brew install ponysay|https://github.com/erkin/ponysay#readme"
  "lolcat|talk in rainbows|command -v lolcat|gem install lolcat|https://github.com/busyloop/lolcat#screenshot"
  "artii|asci art titles|command -v artii|gem install artii|https://github.com/miketierney/artii#readme"
)


function usage() {
  printf "This script installs various interesting command line apps.\n\n"
  printf "Usage: setup-cli-apps [options]\n\n"
  printf "Options\n"
  printf "  -l --list               Show list of apps that can be installed\n"
  printf "  -s --single-app <app>   Install app <app> only (use code as reference)\n"
  printf "  -o --only <app>         Install app <app> only (use code as reference)\n"
  printf "\n"
}

install_homebrew() {
  check "homebrew" "command -v brew"
  if [[ "$(uname)" == "Darwin" ]]; then
    successfully 'echo | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    if [[ $proceed -ne 0 ]]; then
      status "homebrew : ${BOLD}installing dependencies...${NORMAL}"
      successfully "sudo apt-get update && sudo apt-get -y install build-essential curl file git ruby" >> $LOGFILE 2>&1;
      info "homebrew"
      status "homebrew : ${BOLD}installing${NORMAL}"
      successfully 'echo | sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"'
      info "homebrew" "environment ready"
      status "homebrew : ${BOLD}environment setup${NORMAL}"
      successfully 'test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv);test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv);test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile;echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile;echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.localrc;sudo mkdir -p /home/linuxbrew/.linuxbrew/var/homebrew/linked;sudo chown -R $(whoami) /home/linuxbrew/.linuxbrew/var/homebrew/linked'
    fi
  fi
}

install_fundamentals() {
  check "node / npm" "command -v npm"
    successfully "brew install npm"

  check "python 2.x" "brew ls --versions python@2"
    successfully "brew install python@2"

  check "python 3.x" "brew ls --versions python@3"
    successfully "brew install python"
}

choose_cli_apps_loop() {
  user "Would you like to install [a]ll, [n]one, or [s]ome of the apps? [a/n/s]?"
  read -n 1 input
  case "$input" in
    [aA][lL][lL] | [aA])
      for app in "${cli_apps[@]}"; do
        IFS='|' read -r -a app_info <<< "$app"
        app_name="${app_info[0]}"
        app_description="${app_info[1]}"
        if [[ $app_name != --* ]]; then
          chosen_apps=("${chosen_apps[@]}" "${app}")
        fi
      done
      ;;
    [sS][oO][mM][eE] | [sS])
      echo ''
      for app in "${cli_apps[@]}"; do
        IFS='|' read -r -a app_info <<< "$app"
        app_name="${app_info[0]}"
        app_description="${app_info[1]}"
        if [[ $app_name != --* ]]; then
          user_ask_yn "Would you like to install ${BOLD}${app_name}${NORMAL} ${DIM}(${app_description})${NORMAL}?" "y"
          if [[ "$user_ask_yn_result" == "y" ]]; then
            chosen_apps=("${chosen_apps[@]}" "${app}")
          fi
        fi
      done
      ;;
    [nN][oO][nN][eE] | [nN])
      ;;
    *)
      info_no_spinner "Please choose ${BOLD}[a]${NORMAL}ll, ${BOLD}[n]${NORMAL}one, or ${BOLD}[s]${NORMAL}ome.\n"
      choose_cli_apps_loop
      ;;
  esac
}

show_possible_apps() {
  notice_left "${WHITE}We recommend installing following cli apps:\n"
  for app in "${cli_apps[@]}"; do
    IFS='|' read -r -a app_info <<< "$app"
    app_name="${app_info[0]}"
    app_description="${app_info[1]}"
    app_link="${app_info[4]}"

    if [[ $app_name == --* ]]; then
      app_name="${app_name#*--}"
      printf "\n${BOLD}${YELLOW}%s${NORMAL}:\n\n" "${app_name}"
    else
      printf " - \e]8;;%s\e\\${BOLD}%s\e]8;;\e\\${NORMAL} ${DIM}(%s)${NORMAL}\n" "${app_link}" "${app_name}" "${app_description}"
    fi
  done
  echo ""
}

install_cli_apps() {
  chosen_apps=() # When the user opts to install a package it will be added to this array.

  if [[ -z "$1" ]]; then
    show_possible_apps
    choose_cli_apps_loop

    echo ""
  else
    IFS=',' read -r -a given_appnames <<< "$1"
    for selected in "${given_appnames[@]}"; do
      for app in "${cli_apps[@]}"; do
        IFS='|' read -r -a app_info <<< "$app"
        app_code="${app_info[0]}"
        if [[ "$app_code" == "$selected" ]]; then
          chosen_apps=("${chosen_apps[@]}" "${app}")
        fi
      done
    done
  fi

  if [ ${#chosen_apps[@]} -ne 0 ]; then
    function join_by { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }

    chosen_apps_names=()
    for app in "${chosen_apps[@]}"; do
      IFS='|' read -r -a app_info <<< "$app"
      app_name="${app_info[0]}"
      chosen_apps_names=("${chosen_apps_names[@]}" "${app_name}")
    done
    chosen_apps_names_str=$(join_by ', ' "${chosen_apps_names[@]}")
    tput smam
    _title_ "Installing Selected Apps ${NORMAL}${DIM}(${chosen_apps_names_str})${NORMAL}"
    tput rmam
  fi

  for app in "${chosen_apps[@]}"; do
    IFS='|' read -r -a app_info <<< "$app"
    app_name="${app_info[0]}"
    app_description="${app_info[1]}"
    app_check="${app_info[2]}"
    app_installer="${app_info[3]}"

    check "$app_name" "$app_check"
    successfully "$app_installer" "perhaps it is already installed."
  done
}


while [[ "$1" == -* ]]; do
  case "$1" in
  -l|--list)
    show_possible_apps
    trap finish EXIT
    exit
    ;;
  -s|--single-app|-o|--only)
    shift
    install_cli_apps "$1"
    trap finish EXIT
    exit
    ;;
  -h|--help)
    usage
    trap finish EXIT
    exit 0
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

if [[ $bootstrapping -ne 1 ]]; then
  header "Let's install some interesting cli apps ..."

  ask_sudo_password

  notice_left "\nFeel free to follow the details by running:"
  notice_left "${BOLD} tail -f $LOGFILE ${NORMAL}in another terminal\n"
fi

_title_ "First some base stuff, we just need:"

install_homebrew
install_fundamentals
install_cli_apps

trap finish EXIT

if [[ $bootstrapping -ne 1 ]]; then
  _title_ "Done... Have fun!"
fi
