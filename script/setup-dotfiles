#!/usr/bin/env bash

set +e
proceed=1
result=0

DOTFILES_ROOT="$HOME/.dotfiles"
LOGFILE=/tmp/dotfiles-setup

. $DOTFILES_ROOT/script/shared-functions

# ensure we capture unexpected exits
trap exit_warning EXIT

echo "Running in $0 ${BASH_VERSION}" >> $LOGFILE

if [[ $bootstrapping -ne 1 ]]; then
  header "Let's setup our dotfiles ..."

  ask_sudo_password

  notice_left "\nFeel free to follow the details by running:"
  notice_left "${BOLD} tail -f $LOGFILE ${NORMAL}in another terminal\n"
fi

install_zsh() {
  _title_ 'Checking ZSH environment:'
  check "zsh" "command -v zsh"
  if [[ $proceed -ne 0 ]]; then
    if [[ "$(uname)" == "Darwin" ]]; then
      successfully "brew install zsh"
    elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
      successfully "sudo apt-get update && sudo apt-get -y install zsh"
    fi
  fi

  check "oh-my-zsh" "ls ~/.oh-my-zsh" "cd ~/.oh-my-zsh && git pull"
  if [[ $proceed -ne 0 ]]; then
    info_no_spinner "oh-my-zsh : ${BOLD}installing${NORMAL} (please provide password when asked)\n\n"
    sudo -v
    curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -o /tmp/omz.sh >> $LOGFILE 2>&1;
    sed -i''  '/echo/d' /tmp/omz.sh
    sed -i''  '/env zsh/d' /tmp/omz.sh
    sh /tmp/omz.sh | tee $LOGFILE;
    rm -rf /tmp/omz.sh
    echo ''
    success "oh-my-zsh : ${BOLD}installed${NORMAL}"
  fi
}

install_dotfiles () {
  _title_ 'Installing dotfiles:'

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    info "$source"
    link_dotfile "$source"
  done

  for source in `find $DOTFILES_ROOT/config -name \*.symlink`
  do
    info "$source"
    link_config "$source"
  done

  if [[ "`uname -s`" == "Darwin" ]]; then
    info "Fix OSX zsh environment bug"
    if [[ -f /etc/{zshenv} ]]; then
      successfully "sudo mv /etc/{zshenv,zprofile}"
    else
      success "Fix OSX zsh environment bug : not needed"
    fi
  fi
}

install_zshplugins () {
  _title_ 'Installing ZSH plugins'

  declare -a plugins=("jocelynmallon/zshmarks"
                      "iam4x/zsh-iterm-touchbar"
                      "zsh-users/zsh-autosuggestions"
                      "amstrad/oh-my-matrix"
                      "vasyharan/zsh-brew-services"
                      "zsh-users/zsh-completions"
                      "g-plane/zsh-yarn-autocompletions"
                      "djui/alias-tips"
                      "obayer/iosctl"
                      "zdharma-continuum/fast-syntax-highlighting"
                      "peterhurford/git-it-on.zsh")

  declare -a rename=("git-it-on.zsh/git-it-on")

  for plugin in "${plugins[@]}"
  do
    source="git@github.com:${plugin}.git"
    directory=${plugin#*/}
    for gsub in "${rename[@]}"
    do
      IFS='/' read -ra replacements <<< "$gsub"
      pattern="${replacements[0]}"
      result="${replacements[1]}"
      directory=${directory/$pattern/$result}
    done
    target=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/${directory}

    if [ ! -d "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/${directory}" ]
    then
      info "Cloning plugin ${source} into ${target/$HOME/'~'}}"
      eval "git clone ${source} ${target}" &> /dev/null
      success "pluging ${BOLD}`basename $target`${NORMAL} : installed"
    else
      success "skipping plugin ${BOLD}`basename $target`${NORMAL}: already installed"
    fi
  done
}

check_os () {
  # the ubuntu subsystem on windows works a bit different
  if [[ $(uname -r) =~ Microsoft$ ]]; then
    touch "$DOTFILES_ROOT/.multiuser"
    export ZSH_DISABLE_COMPFIX="true"
  fi
}

install_zsh
install_dotfiles
install_zshplugins
check_os

trap finish EXIT

if [[ $bootstrapping -ne 1 ]]; then
  _title_ "Done... Enjoy!"
fi
